<%#
  Generic confirmation modal that works with JavaScript data attributes

  Usage with data attributes on buttons:
  data: {
    "bs-toggle": "modal",
    "bs-target": "#confirmationModal",
    "confirm-title": "Delete Student",
    "confirm-message": "Are you sure you want to delete John Doe?",
    "confirm-action": "Delete Student"
  }
%>

<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header border-0">
        <h5 class="modal-title" id="confirmationModalLabel">
          <i class="fas fa-exclamation-triangle text-warning me-2"></i>
          <span id="modal-title-text">Confirm Action</span>
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body">
        <p class="mb-0" id="modal-message-text">Are you sure you want to perform this action?</p>
      </div>

      <div class="modal-footer border-0">
        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times me-1"></i>Cancel
        </button>
        <button type="button" id="modal-confirm-btn" class="btn btn-danger">
          <i class="fas fa-trash me-1"></i>
          <span id="modal-action-text">Confirm</span>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
function initializeConfirmationModal() {
  console.log('Initializing confirmation modal...');

  const confirmationModal = document.getElementById('confirmationModal');
  if (!confirmationModal) {
    console.log('Confirmation modal not found');
    return;
  }

  const modalTitleText = document.getElementById('modal-title-text');
  const modalMessageText = document.getElementById('modal-message-text');
  const modalActionText = document.getElementById('modal-action-text');
  const modalConfirmBtn = document.getElementById('modal-confirm-btn');

  if (!modalTitleText || !modalMessageText || !modalActionText || !modalConfirmBtn) {
    console.log('Modal elements not found');
    return;
  }

  let triggerElement = null;

  // Listen for modal show event
  confirmationModal.addEventListener('show.bs.modal', function(event) {
    console.log('Modal show event triggered');
    triggerElement = event.relatedTarget; // Button that triggered the modal

    if (!triggerElement) {
      console.log('No trigger element found');
      return;
    }

    // Extract data attributes
    const title = triggerElement.dataset.confirmTitle || 'Confirm Action';
    const message = triggerElement.dataset.confirmMessage || 'Are you sure you want to perform this action?';
    const action = triggerElement.dataset.confirmAction || 'Confirm';

    console.log('Modal data:', { title, message, action });

    // Update modal content
    modalTitleText.textContent = title;
    modalMessageText.textContent = message;
    modalActionText.textContent = action;
  });

  // Handle confirm button click
  modalConfirmBtn.addEventListener('click', function() {
    console.log('Confirm button clicked');

    if (!triggerElement) {
      console.log('No trigger element available');
      return;
    }

    // First try to get form by ID if specified
    const formId = triggerElement.dataset.formId;
    console.log('Looking for form with ID:', formId);

    let form;

    if (formId) {
      form = document.getElementById(formId);
      console.log('Form found by ID:', form);
    } else {
      // Fallback to finding the closest form
      form = triggerElement.closest('form');
      console.log('Form found by closest:', form);
    }

    if (form) {
      console.log('Submitting form:', form);

      // Close the modal first
      try {
        const modalInstance = bootstrap.Modal.getInstance(confirmationModal);
        if (modalInstance) {
          modalInstance.hide();
        }
      } catch (e) {
        console.log('Error closing modal:', e);
      }

      // Submit the form after a small delay to ensure modal closes
      setTimeout(() => {
        form.submit();
      }, 150);
    } else {
      console.error('Could not find form to submit for ID:', formId);
    }
  });

  console.log('Confirmation modal initialized successfully');
}

// Initialize on DOM ready and Turbo load
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOMContentLoaded fired');
  initializeConfirmationModal();
});

document.addEventListener('turbo:load', function() {
  console.log('turbo:load fired');
  initializeConfirmationModal();
});
</script>